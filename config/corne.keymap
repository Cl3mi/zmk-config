#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// dt-formatter: indent = "  "
// dt-formatter: multilineIntegerCellsIndent = "reindent"
// dt-formatter: multilineListCommaStyle = "leading"

&sk {
  /delete-property/ ignore-modifiers;
};

/ {
  combos {
    compatible = "zmk,combos";

    tab {
      key-positions = <2 3>;
      bindings = <&kp TAB>;
    };

    ctrl {
      key-positions = <26 27>;
      bindings = <&kp LCTRL>;
    };

    cmd {
      key-positions = <37 38>;
      bindings = <&kp LCMD>;
    };

    alt {
      key-positions = <39 40>;
      bindings = <&kp LEFT_ALT>;
    };

    shift {
      key-positions = <8 9>;
      bindings = <&kp LSHIFT>;
    };

    caps_word {
      key-positions = <17 18>;
      bindings = <&caps_word>;
    };

    delete {
      key-positions = <32 33>;
      bindings = <&kp DEL>;
    };
  };

  macros {
    greeting: greeting {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "greeting";
      bindings = <&kp H &kp E &kp L &kp L &kp O>;
    };
    shift: with_lshift {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      label = "KEY_PRESS_WITH_LEFT_SHIFT_MODIFIER";
      bindings
        = <&macro_press>
        , <&kp LSHFT>
        , <&macro_tap>
        , <&macro_param_1to1 &kp MACRO_PLACEHOLDER>
        , <&macro_release>
        , <&kp LSHFT>
        ;
    };
    as: autoshift {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      label = "AUTOSHIFT_KEYPRESS";
      bindings
        = <&macro_press>
        , <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
        , <&macro_pause_for_release>
        , <&macro_release>
        , <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
        ;
    };
  };

  behaviors {
    as_ht: autoshift_hold_tap {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "AUTOSHIFT_HOLD_TAP";
      bindings = <&shift>, <&kp>;

      tapping-term-ms = <300>;
    };
    hml: homewrow_mods_left {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_LEFT_HAND";
      bindings = <&kp>, <&kp>;
      tapping-term-ms = <300>;

      hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
    };
    hmr: homewrow_mods_right {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_RIGHT_HAND";
      bindings = <&kp>, <&kp>;
      tapping-term-ms = <300>;

      hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
    };
    capdance: capdance {
      compatible = "zmk,behavior-tap-dance";
      label = "CAPDANCE";
      #binding-cells = <0>;
      bindings = <&caps_word>, <&kp CAPS>;
    };
    lt: layer_tap {
      compatible = "zmk,behavior-hold-tap";
      label = "LAYER_TAP";
      #binding-cells = <2>;
      bindings = <&mo>, <&kp>;
      tapping-term-ms = <300>;
    };
  };

  conditional_layers {
    compatible = "zmk,conditional-layers";

    tri_layer {
      if-layers = <1 2>;
      then-layer = <3>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    base {
      bindings = <
        &kp TAB    &kp Q         &kp W         &kp E        &kp R                                    &kp T        &kp Y    &kp U                                     &kp I        &kp O         &kp P            &kp BSLH
        &capdance  &hml LSHFT A  &hml LCTRL S  &hml LALT D  &hml LCMD F                              &kp G        &kp H    &hmr RCMD J                               &hmr RALT K  &hmr RCTRL L  &hmr RSHFT SEMI  &kp APOS
        &kp LSHFT  &kp Z         &kp X         &kp C        &kp V                                    &kp B        &kp N    &kp M                                     &kp COMMA    &kp DOT       &kp FSLH         &kp ESC
                              &lt 2 LGUI  &lt 1 SPACE  &kp BSPC  &lt 1 RET  &lt 2 RALT  &kp ESC
      >;

    };

     raise {
        bindings = <
            &kp ESC     &kp TAB      &kp F1       &kp F2       &kp F3       &kp F4        &kp N7      &kp N8       &kp N9       &kp SLASH    &kp ASTERISK &kp MINUS
            &kp DEL     &kp BSPC     &kp F5       &kp F6       &kp F7       &kp F8        &kp N4      &kp N5       &kp N6       &kp PLUS     &trans       &trans
            &kp LEFT    &kp DOWN     &kp UP       &kp RIGHT    &kp PG_UP    &kp PG_DN     &kp N1      &kp N2       &kp N3       &kp KP_ENTER &trans       &trans
                                      &trans      &kp N0       &kp COMMA    &trans      &trans      &trans
        >;
      };

      lower {
        bindings = <
            &trans      &kp EXCL    &kp AT      &kp HASH    &kp DLLR    &kp PRCNT
            &trans      &kp LBKT    &kp LCBR    &kp LPAR    &kp RPAR    &kp RCBR
            &kp CARET   &kp AMPS    &kp STAR    &kp EQUAL   &kp PLUS    &kp PIPE
            &kp TILDE   &kp MINUS   &kp UNDERSCORE &kp BSLH &kp COLON   &kp SEMI
            &trans      &kp GRAVE   &kp EURO    &kp RBKT    &kp AT      &kp BACKSLASH
                                  &trans     &trans     &trans     &trans     &trans     &trans
        >;
      };


    autoshift {
      bindings = <
        &trans  &as Q  &as W  &as E   &as R   &as T     &as Y   &as U   &as I   &as O   &as P   &trans
        &trans  &as A  &as S  &as D   &as F   &as G     &as H   &as J   &as K   &as L   &trans  &trans
        &trans  &as Z  &as X  &as C   &as V   &as B     &as N   &as M   &trans  &trans  &trans  &trans
                              &trans  &trans  &trans    &trans  &trans  &trans
      >;
    };
  };
};
